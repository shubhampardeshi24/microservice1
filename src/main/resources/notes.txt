Response Status for RestAPI

	Resource not found 404
	server exception 500
	Validation error 400
	
	200 Success
	201 Created
	204 No Content
	401 Unauthorised
	400 Bad Request
	
============================================================

HTTP header can be used to send URI in the response
@Getmapping("/users")
public User getUser(){
}

Servlet

==========================================================
@ResponseStatus(code = HttpStatus.NOT_FOUND)
public class UserNotFoundException extends RuntimeException {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public UserNotFoundException(String message) {
		super(message);
	}
}
=========================================================
How to create structure for the exception response 

ResponseEntityExcptionHandler 

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-validation</artifactId>
</dependency>

Started validation is the dependency required to perform validation check in RestAPI's

IN ResponseEntityExcptionHandler class exception method is there with name "handleMethodArgumentNotValid" Override this method to handle the exception


Advanced RestAPI Features
-> Documentation
-> content Negotiation
-> Internationalization -
-> Versioning
-> HATEOS
-> Static Filtering
-> Dynamic filtering

Documentation 
	Swagger
	OpenAPI
	
Converting response object into XML/JSON is called as serialization

====================================================================
Json filtering

	static filtering
	dynamic filterin
	Jackson properties

Dyanmic Filtering
MappinJacksonValue is used to perform Dynaming filtering	

===============================

Spring Boot Actuator

it provides production - ready features
	- Monitor and manage your application in you production
spring boot started actuator:
	provides a number of endpoints
		beans - Complete list of spring beans in yourapp
		Health - application Health information
		metrics - Application metrics
		Mappings - Details aroung request Mapping 
=========================================================================

Exploring API's with Spring Boot Hal Explorer

HAL : (JSON Hypertext Application Lnguage)
	Simple format that gives a consistent and easy way to hyperlink 
	
	<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-rest-hal-explorer</artifactId>
		</dependency>
==========================================================================


Please add the following setting to enable H2-Console:

We need to add "spring.h2.console.enabled=true"

=======================================================================
data.sql file updated to insert more user record
userRepostory created and extended with JPA repository

Hibernate: drop table if exists post cascade 
Hibernate: drop table if exists user_details cascade 
Hibernate: drop sequence if exists post_seq
Hibernate: create sequence post_seq start with 1 increment by 50
Hibernate: create table post (id integer not null, user_id integer, description varchar(255), primary key (id))
Hibernate: create table user_details (birth_date date, id integer generated by default as identity, name varchar(255), primary key (id))
Hibernate: alter table if exists post add constraint FKa3biitl48c71riii9uyelpdhb foreign key (user_id) references user_details
=======================================================================
Docker installation on windows 
